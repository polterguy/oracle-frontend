
.title
.image:"https://oracle.ainiro.io/articles/ainiro-oracle-frank.png"
.content
.created
.related:
.url
.description
.source
.ad

.oninit

   // Figuring out URL that was requested.
   request.url
   set-value:x:@.url
      strings.concat
         .:"https://oracle.ainiro.io/"
         get-value:x:@request.url

   // Sanity checking URL and retrieving article's URL.
   .url
   strings.split:x:@request.url
      .:/
   if
      or
         neq
            get-count:x:@strings.split/*
            .:int:2
         neq:x:@strings.split/0
            .:articles
      .lambda

         // Oops, non-existent URL
         throw:Article was not found
            status:int:404
            public:bool:true

   // Article MIGHT exist, setting above [.url]
   set-value:x:@.url
      get-value:x:@strings.split/1

   // Finding article in database
   data.connect:[generic|oracle]
      data.read
         table:articles
         columns
            article_id
            title
            content
            source
            created
            permalink
         where
            and
               url.eq:x:@.url

      // Making sure article exists.
      if
         not
            exists:x:@data.read/*
         .lambda

            // Oops, non-existent URL
            throw:Article was not found
               status:int:404
               public:bool:true

      // Articles exists, populating fields.
      set-value:x:@.title
         get-value:x:@data.read/*/*/title
      set-value:x:@.content
         markdown2html:x:@data.read/*/*/content
      convert:x:@data.read/*/*/created
         type:date
      set-value:x:@.created
         date.format:x:@convert
            format:D
      if
         eq:x:@data.read/*/*/permalink
            .:long:1
         .lambda
            set-value:x:@.created
               strings.concat
                  get-value:x:@.created
                  .:" - Permalink"

      set-value:x:@.description
         strings.substring:x:@data.read/0/*/content
            .:int:0
            .:int:250
      set-value:x:@.description
         strings.replace:x:@.description
            .:@""""
            .:
      set-value:x:@.source
         get-value:x:@data.read/0/*/source

      // Checking of [.content] contains an image, and if so, using it as OG and Twitter image.
      html2lambda:x:@.content
      if
         exists:x:@html2lambda/**/img
         .lambda

            // Changing [.image] to first image we find in result.
            set-value:x:@.image
               get-value:x:@html2lambda/**/img/[0,1]/*/\@src

      // Checking if article contains code elements, at which point we include syntax highlighter.
      if
         exists:x:@html2lambda/**/pre
         .lambda

            // Injecting highlight.js
            insert-after:x:@html2lambda/0/-
               .
                  div
                     #text:@"<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"">
<script src=""https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.7.0/build/highlight.min.js""></script>
<script>hljs.highlightAll();</script>"

      // Updating HTML again now that it's possibly transformed.
      set-value:x:@.content
         lambda2html:x:@html2lambda

      // Finding related articles.
      data.select:@"select a.title, a.url, 100 - (vss.distance * 100) as similarity
      from vss_articles as vss
        inner join articles a on a.article_id = vss.rowid
        where vss_search(
          embedding_vss,
          vss_search_params((select embedding_vss from vss_articles where rowid = @id limit 1), 11))
          and a.article_id != @id order by vss.distance"
         id:x:@data.read/0/*/article_id

      // Looping through related articles and creating our navigation URLs.
      for-each:x:@data.select/*
         set-value:x:@.related
            strings.concat
               get-value:x:@.related
               .:"\r\n"
               .:@"<li class=""nav-item""><a class=""pure-button pure-button-primary"" href=""/articles/"
               get-value:x:@.dp/#/*/url
               .:@""">"
               get-value:x:@.dp/#/*/title
               .:@"</a></li>"

      // Fetching most relevant ad, if there are any relevant ads.
      data.select:@"
select a.content
	from vss_ads as vss
    	inner join ads a on a.ad_id = vss.rowid
   where vss_search(
     vss.embedding_vss,
     vss_search_params((select embedding_vss from vss_articles where rowid = @id), 1)
   ) and vss.distance < 0.55"
         id:x:@data.read/0/*/article_id

      // Checking if above invocation returned a relevant ad.
      if
         exists:x:@data.select/*
         .lambda

            // We have a relevant ad.
            unwrap:x:+/*/*/content
            set-value:x:@.ad
               io.file.mixin:/etc/www/.components/add.html
                  content:x:@data.select/0/*/content

      // Returning correct MIME type and charset.
      response.headers.set
         Content-Type:text/html; charset=utf8;
         Cache-Control:public, max-age=84600
